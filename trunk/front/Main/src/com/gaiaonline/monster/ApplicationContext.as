//Created by Action Script Viewer - http://www.buraks.com/asv
package com.gaiaonline.monster {
    import flash.display.*;
    import com.gaiaonline.monster.model.*;
    import com.gaiaonline.monster.view.components.smallteam.*;
    import gaia.moga.dex.model.*;
    import gaia.moga.dex.assets.*;
    import com.gaiaonline.monster.events.*;
    import com.gaiaonline.monster.model.world.*;
    import gaia.moga.travel.events.*;
    import gaia.moga.settings.view.ui.*;
    import gaia.moga.collections.model.*;
    import gaia.moga.friendlist.view.ui.*;
    import gaia.moga.friendlist.model.*;
    import gaia.moga.story.view.ui.*;
    import com.gaiaonline.monster.service.sound.*;
    import com.gaiaonline.monster.view.components.app.panel.*;
    import com.gaiaonline.monster.view.components.starseedBasket.model.*;
    import gaia.moga.data.*;
    import com.gaiaonline.monster.service.process.*;
    import gaia.moga.collections.service.*;
    import com.gaiaonline.monster.view.components.starseedBasket.service.*;
    import com.gaiaonline.monster.view.*;
    import gaia.moga.assets.*;
    import com.gaiaonline.monster.model.zodiac.*;
    import com.gaiaonline.monster.view.components.whistleReport.*;
    import com.gaiaonline.monster.view.components.battle.fight.*;
    import com.gaiaonline.monster.view.components.home.*;
    import gaia.moga.assets.bundle.*;
    import com.gaiaonline.monster.view.components.battle.ui.*;
    import gaia.moga.story.view.assets.*;
    import alecmce.services.*;
    import gaia.moga.newuser.view.ui.*;
    import gaia.moga.monster.model.*;
    import com.gaiaonline.monster.view.components.questrewards.*;
    import com.gaiaonline.monster.service.*;
    import gaia.moga.inventory.model.*;
    import com.gaiaonline.monster.view.components.store.*;
    import gaia.moga.newuser.model.*;
    import com.gaiaonline.monster.view.components.starseedBasket.view.ui.*;
    import gaia.moga.dex.view.ui.*;
    import gaia.moga.items.model.*;
    import gaia.moga.travel.assets.*;
    import gaia.moga.whistletree.event.*;
    import gaia.moga.whistletree.view.ui.*;
    import gaia.moga.collections.view.*;
    import com.gaiaonline.monster.view.components.recurringPrize.*;
    import gaia.moga.autoHarvester.view.*;
    import gaia.lib.*;
    import com.gaiaonline.monster.model.battle.*;
    import gaia.moga.inventory.view.ui.*;
    import gaia.moga.app.*;
    import gaia.moga.newuser.view.assets.*;
    import gaia.moga.app.view.ui.*;
    import com.gaiaonline.monster.view.components.world.*;
    import gaia.moga.collections.event.*;
    import com.gaiaonline.monster.model.quests.*;
    import gaia.moga.travel.view.ui.*;
    import com.gaiaonline.monster.view.components.team.*;
    import com.gaiaonline.monster.view.components.feeds.*;
    import com.gaiaonline.monster.view.components.world.locationinfo.*;
    import org.robotlegs.mvcs.*;
    import gaia.moga.autoHarvester.service.*;
    import com.gaiaonline.monster.view.components.smallteam.anim.*;
    import gaia.moga.dex.service.*;
    import gaia.moga.travel.controller.*;
    import com.gaiaonline.monster.controller.application.*;
    import gaia.moga.ugc.controller.*;
    import gaia.moga.ugc.service.*;
    import com.gaiaonline.monster.controller.team.*;
    import gaia.moga.collections.control.*;
    import gaia.moga.menu.view.ui.*;
    import com.gaiaonline.monster.view.components.whistleAlert.*;
    import com.gaiaonline.monster.controller.feed.*;
    import gaia.moga.whistletree.controller.*;
    import com.gaiaonline.monster.controller.battle.response.*;
    import gaia.moga.story.view.*;
    import com.gaiaonline.monster.view.components.dailyPrize.*;
    import com.gaiaonline.monster.controller.error.*;
    import gaia.moga.newuser.controller.process.*;
    import com.gaiaonline.monster.view.components.app.overlay.*;
    import com.gaiaonline.monster.view.components.starseedBasket.control.*;
    import com.gaiaonline.monster.view.components.app.*;
    import gaia.moga.items.service.*;
    import gaia.moga.gotoshop.*;
    import com.gaiaonline.monster.view.components.starseedBasket.event.*;
    import com.gaiaonline.monster.view.components.quests.*;
    import gaia.moga.app.controller.*;
    import com.gaiaonline.monster.controller.battle.action.*;
    import com.gaiaonline.monster.view.components.starseedBasket.view.*;
    import gaia.moga.travel.view.*;
    import gaia.moga.combatlog.view.ui.*;
    import gaia.moga.newuser.controller.*;
    import gaia.moga.inventory.events.*;
    import com.gaiaonline.monster.view.components.top.*;
    import gaia.moga.quests.controller.*;
    import gaia.moga.gwitter.*;
    import com.gaiaonline.monster.view.components.videoAd.*;
    import gaia.moga.dex.view.*;
    import com.gaiaonline.monster.service.process.battle.*;
    import com.gaiaonline.monster.view.components.homeTutorial.*;
    import com.gaiaonline.monster.controller.gsi.*;
    import com.gaiaonline.monster.view.dialog.*;
    import gaia.moga.friendlist.service.*;
    import gaia.moga.inventory.view.*;
    import com.gaiaonline.monster.view.components.starseedBasket.view.ui.giver.*;
    import com.gaiaonline.monster.view.components.starseedBasket.view.ui.receiver.*;
    import com.gaiaonline.monster.view.components.tooltip.*;
    import gaia.moga.dex.controller.*;
    import gaia.moga.whistletree.view.*;
    import com.gaiaonline.monster.view.components.tutorial.*;
    import gaia.moga.newuser.view.*;
    import gaia.moga.combatlog.view.*;
    import gaia.moga.friendlist.view.*;
    import com.gaiaonline.monster.view.components.ads.*;
    import com.gaiaonline.monster.controller.dialog.*;
    import com.gaiaonline.monster.view.components.itemGrant.*;
    import com.gaiaonline.monster.controller.battle.*;
    import gaia.moga.inventory.controller.*;
    import gaia.moga.menu.view.*;
    import com.gaiaonline.monster.controller.prizeTimer.*;
    import com.gaiaonline.monster.controller.ugcEvent.*;
    import gaia.moga.autoHarvester.controller.*;

    public class ApplicationContext extends Context {

        public function ApplicationContext(_arg1:DisplayObjectContainer=null, _arg2:Boolean=true){
            super(_arg1, _arg2);
        }
        override public function startup():void{
            this.setup();
            dispatchEvent(new ApplicationEvent(ApplicationEvent.CONFIGURE));
            dispatchEvent(new ApplicationEvent(ApplicationEvent.STARTUP));
        }
        private function setup():void{
            injector.mapSingleton(Ticker);
            var _local1:Ticker = injector.instantiate(Ticker);
            injector.mapSingleton(GSIDataService);
            injector.mapValue(Cookie, new Cookie(_local1, "MOGA_SETTINGS"));
            injector.mapClass(NewUserFlowData, NewUserFlowData);
            injector.mapClass(DexSetupProcess, DexSetupProcess);
            injector.mapClass(SetupStoreData, SetupStoreData);
            injector.mapClass(SetupWorldData, SetupWorldData);
            injector.mapClass(UpdateFriends, UpdateFriends);
            injector.mapClass(UpdateUserData, UpdateUserData);
            injector.mapClass(TravelHome, TravelHome);
            injector.mapClass(TravelToNode, TravelToNode);
            injector.mapClass(TravelToFriend, TravelToFriend);
            injector.mapClass(BuyItem, BuyItem);
            injector.mapClass(QuestDataProcess, QuestDataProcess);
            injector.mapClass(WaterWhistleTree, WaterWhistleTree);
            injector.mapClass(HarvestWhistleTree, HarvestWhistleTree);
            injector.mapClass(CreateUser, CreateUser);
            injector.mapClass(NameMonsterProcess, NameMonsterProcess);
            injector.mapClass(SetMonsterStorageProcess, SetMonsterStorageProcess);
            injector.mapClass(RechargeMonster, RechargeMonster);
            injector.mapClass(CompleteTutorialProcess, CompleteTutorialProcess);
            injector.mapClass(RetrieveItemGrantProcess, RetrieveItemGrantProcess);
            injector.mapClass(AttendUGCEventProcess, AttendUGCEventProcess);
            injector.mapClass(RetrieveBattle, RetrieveBattle);
            injector.mapClass(RetrieveRIGItemProcess, RetrieveRIGItemProcess);
            injector.mapClass(RecurringPrizeClaimProcess, RecurringPrizeClaimProcess);
            injector.mapClass(AutoHarvesterProcess, AutoHarvesterProcess);
            injector.mapClass(CollectStarseedsProcess, CollectStarseedsProcess);
            injector.mapClass(GiveStarseedProcess, GiveStarseedProcess);
            injector.mapClass(GetFriendBasketData, GetFriendBasketData);
            commandMap.mapEvent(GSIResponseEvent.HANDLE_BATTLE_RESPONSE, HandleBattleResponseCommand);
            injector.mapSingleton(TimerService);
            injector.mapSingleton(AsyncService);
            injector.mapSingleton(ApplicationModel);
            injector.mapSingleton(HomeRanchModel);
            injector.mapSingleton(PlayerModel);
            injector.mapSingleton(WorldModel);
            injector.mapSingleton(BattleModel);
            injector.mapSingleton(BattleResponsesModel);
            injector.mapSingleton(FriendsModel);
            injector.mapSingleton(NewUserModel);
            injector.mapSingleton(ZodiacModel);
            injector.mapSingleton(DexModel);
            injector.mapSingleton(FriendRanchModel);
            injector.mapSingleton(StoreModel);
            injector.mapSingleton(SoundService);
            injector.mapSingleton(MusicService);
            injector.mapSingleton(QuestModel);
            injector.mapSingleton(StoryModel);
            injector.mapSingleton(WhistleReportModel);
            injector.mapSingleton(ItemGrantModel);
            injector.mapSingleton(DataBundle);
            injector.mapSingleton(SettingsModel);
            injector.mapSingleton(RecurringPrizeModel);
            injector.mapSingleton(VideoAdModel);
            injector.mapSingleton(StarseedBasketModel);
            injector.mapSingleton(MogaFactory);
            injector.mapSingleton(ActionsFactory);
            injector.mapSingleton(ActionFactory);
            injector.mapSingleton(OmnitureService);
            injector.mapSingleton(KontagentService);
            injector.mapSingleton(PartnerPixelService);
            commandMap.mapEvent(TrackingEvent.TRACK, TrackingCommand);
            commandMap.mapEvent(TrackingEvent.PARTNER_PIXEL, PartnerPixelCommand);
            injector.mapSingleton(AssetService);
            injector.mapSingleton(WorldAssetsFactory);
            injector.mapSingleton(MonsterAssetsFactory);
            injector.mapSingleton(HomeAssetsFactory);
            injector.mapSingleton(IconService);
            injector.mapSingleton(FontFactory);
            injector.mapSingleton(ZodiacFactory);
            injector.mapClass(TravelAssetBundle, TravelAssetBundle);
            injector.mapClass(AppAssetsBundle, AppAssetsBundle);
            injector.mapClass(HomeAssetsBundle, HomeAssetsBundle);
            injector.mapClass(BattleAssetsBundle, BattleAssetsBundle);
            injector.mapClass(WorldAssetsBundle, WorldAssetsBundle);
            injector.mapClass(NewUserIntroBundle, NewUserIntroBundle);
            injector.mapClass(DexAssetBundle, DexAssetBundle);
            injector.mapSingleton(AppConfig);
            injector.mapSingleton(TextService);
            injector.mapClass(BattleAnimFactory, BattleAnimFactory);
            injector.mapSingletonOf(StoryAssetFactory, WebStoryAssetFactory);
            injector.mapSingleton(FBService);
            injector.mapSingleton(MonetizationService);
            injector.instantiate(MonetizationService);
            mediatorMap.mapView(Loading, LoadingMediator);
            mediatorMap.mapView(PanelStack, OverlayMediator);
            mediatorMap.mapView(Panels, PanelsMediator);
            mediatorMap.mapView(Dialog, DialogMediator);
            mediatorMap.mapView(Application, ApplicationMediator);
            mediatorMap.mapView(Settings, SettingsMediator, null, false, false);
            mediatorMap.mapView(Top, TopMediator);
            mediatorMap.mapView(Menu, MenuMediator);
            mediatorMap.mapView(DexUI, DexMediator, Dex);
            mediatorMap.mapView(Home, HomeMediator);
            mediatorMap.mapView(MogaStorage, MogaStorageMediator);
            mediatorMap.mapView(WhistleTree, WhistleTreeMediator);
            mediatorMap.mapView(StarseedBasket, StarseedBasketMediator);
            mediatorMap.mapView(Battle, BattleMediator);
            mediatorMap.mapView(TravelUI, TravelMediator);
            mediatorMap.mapView(Fight, FightMediator);
            mediatorMap.mapView(World2D, WorldMediator);
            mediatorMap.mapView(LocationInfo, LocationInfoMediator);
            mediatorMap.mapView(NewUserScreen, NewUserScreenMediator);
            mediatorMap.mapView(NewUserIntro, NewUserIntroMediator);
            mediatorMap.mapView(SmallTeam, SmallTeamMediator);
            mediatorMap.mapView(NPCTeam, NPCTeamMediator);
            mediatorMap.mapView(FriendList, FriendListMediator);
            mediatorMap.mapView(NewStory, NewStoryMediator);
            mediatorMap.mapView(CongrazzlesStory, CongrazzlesStoryMediator);
            mediatorMap.mapView(NewQuestStory, NewQuestStoryMediator);
            mediatorMap.mapView(ToolTips, ToolTipMediator);
            mediatorMap.mapView(MonsterCard, MonsterCardMediator);
            mediatorMap.mapView(Store, StoreMediator);
            mediatorMap.mapView(Quests, QuestsMediator, IQuestView);
            mediatorMap.mapView(NewQuests, QuestsMediator, IQuestView);
            mediatorMap.mapView(QuestRewards, QuestRewardsMediator);
            mediatorMap.mapView(Congrazzles, CongrazzlesMediator);
            mediatorMap.mapView(BattleTutorial, BattleTutorialMediator);
            mediatorMap.mapView(HomeTutorial, HomeTutorialMediator);
            mediatorMap.mapView(NameMonster, NameMonsterMediator);
            mediatorMap.mapView(WhistleReport, WhistleReportMediator);
            mediatorMap.mapView(PremiumBundle, PremiumBundleMediator);
            mediatorMap.mapView(Tutorial, TutorialMediator);
            mediatorMap.mapView(GotoShopDialog, GotoShopMediator);
            mediatorMap.mapView(PublishCaptureFeedConfirm, FeedStoryMediator);
            mediatorMap.mapView(ItemGrant, ItemGrantMediator);
            mediatorMap.mapView(SimpleAd, SimpleAdMediator);
            mediatorMap.mapView(DailyPrize, DailyPrizeMediator);
            mediatorMap.mapView(Splash, SplashMediator);
            mediatorMap.mapView(WhistleReminder, WhistleReminderMediator);
            mediatorMap.mapView(WhistleReportItem, WhistleReportItemMediator, null, false, false);
            mediatorMap.mapView(VideoAdBlueNoodle, VideoAdMediator);
            mediatorMap.mapView(RecurringPrize, RecurringPrizeMediator);
            mediatorMap.mapView(RecurringPrizePrompt, RecurringPrizePromptMediator);
            mediatorMap.mapView(WhistleAlert, WhistleAlertMediator);
            mediatorMap.mapView(WhistleAlertPrompt, WhistleAlertPromptMediator);
            mediatorMap.mapView(HomeMonster, HomeMonsterMediator);
            mediatorMap.mapView(StarseedBasketRequesterPanel, StarseedBasketRequesterMediator);
            mediatorMap.mapView(StarseedBasketGiverPanel, StarseedBasketGiverMediator);
            mediatorMap.mapView(AutoHarvester, AutoHarvesterMediator);
            mediatorMap.mapView(AutoHarvesterPrompt, AutoHarvesterPromptMediator);
            mediatorMap.mapView(CombatLog, CombatLogMediator);
            commandMap.mapEvent(ApplicationEvent.LOAD_FONTS, SetupFontsCommand);
            commandMap.mapEvent(ApplicationEvent.CONFIGURE, ConfigureCommand);
            commandMap.mapEvent(ApplicationEvent.STARTUP, StartupCommand);
            commandMap.mapEvent(ApplicationEvent.CONTINUE_STARTUP, ContinueStartupCommand);
            commandMap.mapEvent(ApplicationEvent.SET_STATE, SetApplicationStateCommand);
            commandMap.mapEvent(ApplicationEvent.RETRIEVE_BATTLE, RetrieveBattleCmd);
            commandMap.mapEvent(ApplicationEvent.RETRIEVE_ITEM_GRANT, RetrieveItemGrantCommand);
            commandMap.mapEvent(ApplicationEvent.INVOKE_NEW_USER_ZODIAC, InvokeNewUserZodiacCommand);
            commandMap.mapEvent(ApplicationEvent.INVOKE_NEW_USER_INTRO, InvokeNewUserIntroCommand);
            commandMap.mapEvent(ApplicationEvent.INVOKE_HOME, InvokeHomeCommand);
            commandMap.mapEvent(TravelEvent.TRIGGER, InvokeTravelCommand);
            commandMap.mapEvent(ApplicationEvent.INVOKE_FRIEND_RANCH, InvokeFriendRanchCommand);
            commandMap.mapEvent(DexEvent.OPEN_DEX, InvokeDexCommand);
            commandMap.mapEvent(ApplicationEvent.INVOKE_WORLD, InvokeWorldCommand);
            commandMap.mapEvent(ApplicationEvent.INVOKE_STORY_LOCATION, InvokeStoryLocationCommand);
            commandMap.mapEvent(ApplicationEvent.INVOKE_NEWQUEST_STORY_LOCATION, InvokeNewQuestStoryLocationCommand);
            commandMap.mapEvent(ApplicationEvent.INVOKE_CONGRAZZLES_STORY_LOCATION, InvokeCongrazzlesStoryLocationCommand);
            commandMap.mapEvent(ApplicationEvent.INVOKE_LOSE_STORY_LOCATION, InvokeStoryLocationCommand);
            commandMap.mapEvent(ApplicationEvent.INVOKE_WIN_STORY_LOCATION, InvokeStoryLocationCommand);
            commandMap.mapEvent(ApplicationEvent.INVOKE_CAPTURE_STORY_LOCATION, InvokeStoryLocationCommand);
            commandMap.mapEvent(ApplicationEvent.INVOKE_NEW_ANNOUNCEMENT_STORY, InvokeStoryLocationCommand);
            commandMap.mapEvent(ApplicationEvent.INVOKE_BATTLE, InvokeBattleCommand);
            commandMap.mapEvent(ApplicationEvent.INVOKE_STORE, InvokeStoreCommand);
            commandMap.mapEvent(ApplicationEvent.INVOKE_QUEST, InvokeQuestCommand);
            commandMap.mapEvent(ApplicationEvent.INVOKE_NEWQUEST_STORY, InvokeNewQuestStoryCommand);
            commandMap.mapEvent(ApplicationEvent.INVOKE_NEWQUEST_DIALOG, InvokeNewQuestDialogCommand);
            commandMap.mapEvent(ApplicationEvent.INVOKE_CONGRAZZLES_STORY, InvokeCongrazzlesStoryCommand);
            commandMap.mapEvent(ApplicationEvent.INVOKE_CONGRAZZLES_DIALOG, InvokeCongrazzlesDialogCommand);
            commandMap.mapEvent(ApplicationEvent.INVOKE_BATTLE_TUTORIAL, InvokeBattleTutorialCommand);
            commandMap.mapEvent(ApplicationEvent.INVOKE_HOME_TUTORIAL, InvokeHomeTutorialCommand);
            commandMap.mapEvent(ApplicationEvent.INVOKE_WHISTLE_REPORT, InvokeWhistleReportCommand);
            commandMap.mapEvent(ApplicationEvent.INVOKE_PREMIUM_BUNDLE, InvokePremiumBundleCommand);
            commandMap.mapEvent(ApplicationEvent.INVOKE_TUTORIAL, InvokeTutorialCommand);
            commandMap.mapEvent(ApplicationEvent.INVOKE_TOGGLE_FULLSCREEN, ToggleFullscreenCommand);
            commandMap.mapEvent(ApplicationEvent.INVOKE_SMALLSCREEN, SmallscreenCommand);
            commandMap.mapEvent(ApplicationEvent.INVOKE_OPEN_RIG, InvokeOpenRIGCommand);
            commandMap.mapEvent(ApplicationEvent.OPEN_EXISTING_RIG, OpenExistingRIGCommand);
            commandMap.mapEvent(ApplicationEvent.INVOKE_DISPLAY_AD, InvokeSimpleAdCommand);
            commandMap.mapEvent(ApplicationEvent.PUSH_QUEST_PANELS, PushQuestPanelsCommand);
            commandMap.mapEvent(ApplicationEvent.INVOKE_MOGA_STORAGE, InvokeMogaStorageCommand);
            commandMap.mapEvent(HomeEvent.ACTIVATE_AUTO_HARVESTER, AutoHarvesterCommand);
            commandMap.mapEvent(AnnouncementEvent.SHOW_ANNOUNCEMENT, InvokeAnnouncementCommand);
            commandMap.mapEvent(CatastrophicErrorEvent.ERROR, CatastrophicErrorReportCommand);
            commandMap.mapEvent(MinorErrorEvent.ERROR, MinorErrorReportCommand);
            commandMap.mapEvent(BattleTimeoutErrorEvent.ERROR, BattleTimeoutErrorReportCommand);
            commandMap.mapEvent(DialogInterimEvent.ACTION, ProcessDialogCommand);
            commandMap.mapEvent(MogaStorageEvent.SET_MONSTER_STORE_STATE, SetMonsterStorageCommand);
            commandMap.mapEvent(TeamEvent.SET_TEAM, SetTeamCommand);
            commandMap.mapEvent(TeamEvent.MONSTER_SELECTED, TeamMemberSelectedCommand);
            commandMap.mapEvent(StoreEvent.BUY_ITEM, BuyItemCommand);
            commandMap.mapEvent(PremiumPurchaseEvent.PURCHASE_VIA_FB, PurchaseViaFBCommand);
            commandMap.mapEvent(PremiumPurchaseEvent.PURCHASE_VIA_OFFER, PurchaseViaOfferCommand);
            commandMap.mapEvent(TravelHomeEvent.TRAVEL_HOME, TravelHomeCommand);
            commandMap.mapEvent(TravelToLocationEvent.TRAVEL_TO_LOCATION, TravelToLocationCommand);
            commandMap.mapEvent(TravelToZoneEvent.TRAVEL_TO_ZONE, TravelToZoneCommand);
            commandMap.mapEvent(WhistleTreeEvent.HARVEST, HarvestWhistleTreeCommand);
            commandMap.mapEvent(WhistleTreeEvent.WATER, WaterWhistleTreeCommand);
            commandMap.mapEvent(StarseedBasketEvent.OPEN_REQUESTOR_UI, InvokeStarseedBasketRequestorPanel);
            commandMap.mapEvent(StarseedBasketEvent.OPEN_GIVER_UI, InvokeStarseedBasketGiverPanel);
            commandMap.mapEvent(StarseedBasketEvent.COLLECT_STARSEEDS, CollectStarseedsCommand);
            commandMap.mapEvent(StarseedBasketEvent.GIVE_STARSEED, GiveStarseedCommand);
            commandMap.mapEvent(TeamEvent.PUT_MONSTER_IN_NAP, PutMonsterInNapCommand);
            commandMap.mapEvent(TeamEvent.NAME_MONSTER, NameMonsterCommand);
            commandMap.mapEvent(TeamEvent.RECHARGE_MONSTER_IN_NAP, RechargeMonsterInNapCommand);
            commandMap.mapEvent(TeamEvent.RECHARGE_MONSTER, RechargeMonsterCommand);
            commandMap.mapEvent(TeamEvent.AWAKEN_MONSTER, AwakenMonsterCommand);
            commandMap.mapEvent(TeamEvent.SHOW_EMPTY_TEAM_MESSAGE, EmptyTeamMessageCommand);
            commandMap.mapEvent(TeamEvent.SHOW_DEAD_TEAM_MESSAGE, DeadTeamMessageCommand);
            commandMap.mapEvent(TeamEvent.SHOW_TEAM_MEMBER_NAP_MESSAGE, TeamMemberNapMessageCommand);
            commandMap.mapEvent(BattleActionEvent.START_BATTLE, StartBattleCommand);
            commandMap.mapEvent(BattleActionEvent.ATTACK, AttackActionCommand);
            commandMap.mapEvent(BattleActionEvent.USE_WHISTLE, HelpRequestCommand);
            commandMap.mapEvent(BattleActionEvent.RUN_AWAY, RunAwayCommand);
            commandMap.mapEvent(BattleActionEvent.TRY_TO_CAPTURE, CaptureActionCommand);
            commandMap.mapEvent(BattleActionEvent.COMPLETE_ROUND, CompleteRoundCommand);
            commandMap.mapEvent(BattleResponseEvent.HANDLE_ONE_BATTLE_RESPONSE, HandleOneBattleResponseCommand);
            commandMap.mapEvent(BattleResponseEvent.START_BATTLE, StartResponseCommand);
            commandMap.mapEvent(BattleResponseEvent.INITIAL_ATTACK, InitialAttackResponseCommand);
            commandMap.mapEvent(BattleResponseEvent.CHOOSE_NEXT_MONSTER, ChoiceResponseCommand);
            commandMap.mapEvent(BattleResponseEvent.CAPTURE_MONSTER, CaptureResponseCommand);
            commandMap.mapEvent(BattleResponseEvent.PLAYER_MOVE, PlayerMoveResponseCommand);
            commandMap.mapEvent(BattleResponseEvent.SWAP_MONSTER, SwapResponseCommand);
            commandMap.mapEvent(BattleResponseEvent.REQUEST_HELP, HelpResponseCommand);
            commandMap.mapEvent(GotoShopEvent.OUT_OF_COFFEE, InvokeGotoShopCommand);
            commandMap.mapEvent(GotoShopEvent.OUT_OF_SEEDS, InvokeGotoShopCommand);
            commandMap.mapEvent(HomeEvent.WHISTLE_TREE_REMINDER, WhistleTreeReminderCommand);
            commandMap.mapEvent(UGCEvent.ATTEND_EVENT, AttendUGCEventCommand);
            commandMap.mapEvent(UGCEvent.CREATE_EVENT, CreateUGCEventCommand);
            commandMap.mapEvent(SettingsEvent.UPDATE_SETTINGS, SettingsUpdateCommand);
            commandMap.mapEvent(PostToStreamEvent.CAPTURE_MONSTER, PostCaptureToStreamCommand);
            commandMap.mapEvent(PostToStreamEvent.LEVEL_UP_MONSTER, PostLevelUpToStreamCommand);
            commandMap.mapEvent(VideoAdEvent.SHOW_AD, InvokeVideoAdCommand);
            commandMap.mapEvent(RecurringPrizeEvent.CLAIM_PRIZE, RecurringPrizeClaimCommand);
            this.setupInventory();
            this.setupItems();
            this.setupGwitter();
            this.setupCollections();
        }
        private function setupCollections():void{
            injector.mapSingleton(MogaCollectionsModel);
            injector.mapSingleton(MogaCollectionFactory);
            injector.mapClass(CollectionDataProcess, CollectionDataProcess);
            injector.mapClass(CollectionDexSetupProcess, CollectionDexSetupProcess);
            injector.mapClass(TradeInCollectionProcess, TradeInCollectionProcess);
            mediatorMap.mapView(CollectionsManagementPanel, CollectionsManagementMediator);
            mediatorMap.mapView(CollectionRewards, CollectionRewardsMediator);
            mediatorMap.mapView(TradeInConfirmation, TradeInConfirmationMediator);
            commandMap.mapEvent(MogaCollectionEvent.SHOW_COLLECTION_MANAGEMENT, ShowCollectionManagmentCommand, MogaCollectionEvent);
            commandMap.mapEvent(MogaCollectionEvent.REQUEST_COLLECTIONS_DATA, RequestCollectionDataCommand, MogaCollectionEvent);
            commandMap.mapEvent(MogaCollectionEvent.TRADE_IN_COLLECTION, TradeInCollectionCommand, MogaCollectionEvent);
            commandMap.mapEvent(MogaCollectionEvent.SHOW_REWARD_CONFIRMATION, ShowTradeInRewardCommand, MogaCollectionEvent);
        }
        private function setupInventory():void{
            injector.mapSingleton(InventoryModel);
            mediatorMap.mapView(InventoryUI, InventoryMediator);
            commandMap.mapEvent(UseCoffeeEvent.USE_COFFEE, UseCoffeeCommand);
        }
        private function setupItems():void{
            injector.mapClass(SetupItems, SetupItems);
            injector.mapSingleton(ItemFactory);
        }
        private function setupGwitter():void{
            injector.mapClass(PostToGwitter, PostToGwitter);
            commandMap.mapEvent(GwitterEvent.POST_TO_GWITTER, PostToGwitterCommand);
        }

    }
}//package com.gaiaonline.monster 
